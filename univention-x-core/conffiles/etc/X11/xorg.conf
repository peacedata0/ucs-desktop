@%@UCRWARNING=# @%@

@!@
if configRegistry.get('xorg/autodetect', 'no').lower() in ('yes', 'true', '1'):
	print '''
# The auto-detection is activated.
# To deactivate it set the UCR variable xorg/autodetect to 'no'
'''
	if configRegistry.is_true("xorg/autodetect/dri", True):
		print '''
Section "DRI"
        Mode 0666
EndSection
'''
else:
	print '''
Section "Files"
	FontPath        "/usr/share/fonts/X11/misc"
	FontPath        "/usr/X11R6/lib/X11/fonts/misc"
	FontPath        "/usr/share/fonts/X11/cyrillic"
	FontPath        "/usr/X11R6/lib/X11/fonts/cyrillic"
	FontPath        "/usr/share/fonts/X11/100dpi/:unscaled"
	FontPath        "/usr/X11R6/lib/X11/fonts/100dpi/:unscaled"
	FontPath        "/usr/share/fonts/X11/75dpi/:unscaled"
	FontPath        "/usr/X11R6/lib/X11/fonts/75dpi/:unscaled"
	FontPath        "/usr/share/fonts/X11/Type1"
	FontPath        "/usr/X11R6/lib/X11/fonts/Type1"
	FontPath        "/usr/share/fonts/X11/100dpi"
	FontPath        "/usr/X11R6/lib/X11/fonts/100dpi"
	FontPath        "/usr/share/fonts/X11/75dpi"
	FontPath        "/usr/X11R6/lib/X11/fonts/75dpi"
	# path to defoma fonts
	FontPath        "/var/lib/defoma/x-ttcidfont-conf.d/dirs/TrueType"
EndSection
'''

	print 'Section "Module"'
	for mod in configRegistry.get('xorg/module/load', '').split(';'):
		if mod:
			print '\tLoad\t"%s"' % mod
	print 'EndSection'

	print '''

Section "ServerLayout"
	Identifier "XFree86 Configured"
	Screen 0 "Screen0" 0 0
	InputDevice "Keyboard0" "CoreKeyboard"
'''

# old style variables
	device_keylist = {}
	for key in configRegistry.keys():
		if key.startswith('xorg/mouse/') and key.endswith('/device') and not key == 'xorg/mouse/device':
			device_keylist[configRegistry[key]] = configRegistry['xorg/mouse/%s/Identifier' % key.split('/')[2]]
	if configRegistry.get('xorg/mouse/device', None) in device_keylist:
		print '\tInputDevice\t"%s" "CorePointer"' % device_keylist[configRegistry.get('xorg/mouse/device', None)]
	else:
		for key in configRegistry.keys():
			if key.startswith('xorg/mouse/') and key.endswith('/Identifier'):
				if not configRegistry.get(key.replace('/Identifier', '/disabled'), 'false').lower() in ['true', 'yes']:
					print '\tInputDevice\t"%s" "CorePointer"' % configRegistry[key]
	print 'EndSection'

	print ''

	header_printed = False
	for key in configRegistry.keys():
		if key.startswith('xorg/serverflags/options/'):
			if not header_printed:
				print 'Section "ServerFlags"'
				header_printed = True
			opt = key.split('xorg/serverflags/options/')[-1]
			if configRegistry[key] == "SET":
				print '\tOption\t"%s"' % opt
			else:
				print '\tOption\t"%s" "%s"' % (opt, configRegistry[key])
	if header_printed:
		print 'EndSection'
		print ''

	print '''
Section "InputDevice"
	Identifier "Keyboard0"
	Driver "evdev"
	Option "CoreKeyboard"
EndSection
'''
	print ''

	mouse_list = []
	for key in configRegistry.keys():
		if key.startswith('xorg/mouse/'):
			name = key.split('/')[2]
			if not name in mouse_list:
				mouse_list.append(name)
	for mouse in mouse_list:
		header_printed = False
		for key in configRegistry.keys():
			if key.startswith('xorg/mouse/%s/' % mouse):
				if not header_printed:
					print 'Section "InputDevice"'
					header_printed = True

				if key.startswith('xorg/mouse/%s/options/' % mouse):
					opt = key.split('xorg/mouse/%s/options/' % mouse)[-1]
					print '\tOption\t"%s" "%s"' % (opt, configRegistry[key])
				else:
					opt = key.split('xorg/mouse/%s/' % mouse)[-1]
					if opt == 'disabled':
						continue
					if configRegistry[key] == "__SET__":
						print '\t%s' % (opt)
					elif not configRegistry[key] == "__NOT_SET__":
						print '\t%s\t"%s"' % (opt, configRegistry[key])
		if header_printed:
			print 'EndSection'
			print ''

	if configRegistry.get('xorg/device/driver', '') != '':
		print 'Section "Device'
		for key in configRegistry.keys():
			if key.startswith('xorg/device/'):
				if key.startswith('xorg/device/options/'):
					opt = key.split('xorg/device/options/')[-1]
					if configRegistry[key] == "__SET__":
						print '\tOption\t"%s"' % (opt)
					elif not configRegistry[key] == "__NOT_SET__":
						print '\tOption\t"%s" "%s"' % (opt, configRegistry[key])
				else:
					opt = key.split('org/device/')[-1]
					if configRegistry[key] == "__SET__":
						print '\t%s' % (opt)
					elif not configRegistry[key] == "__NOT_SET__":
						if opt.lower() == 'driver' and configRegistry[key].lower() in ['atimisc', 'r128', 'radeon']:
							print '\t%s\t"ati"' % (opt)
						else:
							print '\t%s\t"%s"' % (opt, configRegistry[key])
			if configRegistry.get('xorg/device/driver', '') == 'trident' and not 'xorg/device/options/SWcursor' in configRegistry:
				print '\tOption     "SWcursor"'
		print '\tIdentifier  "Card0"'
		print 'EndSection'

		print ''

	print 'Section "Monitor"'
	print '\tIdentifier  "Monitor0"'
	for key in configRegistry.keys():
		if key.startswith('xorg/monitor/'):
				if key.startswith('xorg/monitor/options/'):
					opt = key.split('xorg/monitor/options/')[-1]
					if configRegistry[key] == "__SET__":
						print '\tOption\t"%s"' % (opt)
					elif not configRegistry[key] == "__NOT_SET__":
						print '\tOption\t"%s" "%s"' % (opt, configRegistry[key])
				elif key.startswith('xorg/monitor/modeline') or key.startswith('xorg/monitor/Modeline'):
					print '\tModeLine\t%s' % (configRegistry[key])
				else:
					opt = key.split('org/monitor/')[-1]
					if configRegistry[key] == "__SET__":
						print '\t%s' % (opt)
					elif not configRegistry[key] == "__NOT_SET__":
						if opt.lower() == 'displaysize':
							try:
								x = configRegistry[key].lower().split('x')[0]
								y = configRegistry[key].lower().split('x')[1]
								print '\tDisplaySize\t%s %s' % (x, y)
							except:
								print '\t#failed to set the DisplaySize'
								pass
						elif opt.lower() == 'gamma':
							gamma = configRegistry[key].strip().split(' ')
							print '\tGamma\t%s %s %s' % (gamma[0], gamma[1], gamma[2])
						else:
							print '\t%s\t%s' % (opt, configRegistry[key])
	print 'EndSection'

	print ''

	print '''
Section "Screen"
	Identifier "Screen0"
	Device	   "Card0"
	Monitor	   "Monitor0"
'''
	for key in configRegistry.keys():
		if key.startswith('xorg/screen/'):
				if key.startswith('xorg/screen/options/'):
					opt = key.split('xorg/screen/options/')[-1]
					if configRegistry[key] == "__SET__":
						print '\tOption\t"%s"' % (opt)
					elif not configRegistry[key] == "__NOT_SET__":
						print '\tOption\t"%s" "%s"' % (opt, configRegistry[key])
				else:
					opt = key.split('xorg/screen/')[-1]
					if configRegistry[key] == "__SET__":
						print '\t%s' % (opt)
					elif not configRegistry[key] == "__NOT_SET__":
						print '\t%s\t%s' % (opt, configRegistry[key])
	for depth in ['1', '2', '4', '8', '16', '24', '32']:
		print '\tSubSection "Display"'
		print '\t\tDepth\t%s' % depth
		print '\t\tModes\t"%s"' % configRegistry.get('xorg/resolution', '1024x768')
		if configRegistry.get('xorg/display/virtual'):
			print '\t\tVirtual\t%s' % configRegistry['xorg/display/virtual']. replace('x', ' ', 1)
		print '\tEndSubSection'

	print 'EndSection'

	section = False
	for key in configRegistry.keys():
		if key.startswith('xorg/extensions/'):
			if not section:
				print 'Section "Extensions"'
				section = True
			if key.startswith('xorg/extensions/options/'):
				opt = key.split('xorg/extensions/options/')[-1]
				if configRegistry[key] == "__SET__":
					print '\tOption\t"%s"' % (opt)
				elif not configRegistry[key] == "__NOT_SET__":
					print '\tOption\t"%s" "%s"' % (opt, configRegistry[key])
			else:
				opt = key.split('xorg/extensions/')[-1]
				if configRegistry[key] == "__SET__":
					print '\t%s' % (opt)
				elif not configRegistry[key] == "__NOT_SET__":
					print '\t%s\t%s' % (opt, configRegistry[key])

	if section:
		print 'EndSection'

	print ''

	if configRegistry.get('xorg/display/primary') != "":
		if configRegistry.get('xorg/display/secondary', '') == "":
			print '# Incomplete RandR settings, xorg/display/secondary needs to be set'
		else:
			print 'Section "Monitor"'
			print '\tIdentifier "%s"' % (configRegistry.get('xorg/display/primary'))
			print '\tOption     "Primary" "True"'
			for key in configRegistry.keys():
				if key.startswith('xorg/monitor/'):
						if key.startswith('xorg/monitor/options/'):
							opt = key.split('xorg/monitor/options/')[-1]
							if configRegistry[key] == "__SET__":
								print '\tOption\t"%s"' % (opt)
							elif not configRegistry[key] == "__NOT_SET__":
								print '\tOption\t"%s" "%s"' % (opt, configRegistry[key])
						elif key.startswith('xorg/monitor/modeline') or key.startswith('xorg/monitor/Modeline'):
							print '\tModeLine\t%s' % (configRegistry[key])
						else:
							opt = key.split('org/monitor/')[-1]
							if configRegistry[key] == "__SET__":
								print '\t%s' % (opt)
							elif not configRegistry[key] == "__NOT_SET__":
								if opt.lower() == 'displaysize':
									try:
										x = configRegistry[key].lower().split('x')[0]
										y = configRegistry[key].lower().split('x')[1]
										print '\tDisplaySize\t%s %s' % (x, y)
									except:
										print '\t#failed to set the DisplaySize'
										pass
								elif opt.lower() == 'gamma':
									gamma = configRegistry[key].strip().split(' ')
									print '\tGamma\t%s %s %s' % (gamma[0], gamma[1], gamma[2])
								else:
									print '\t%s\t%s' % (opt, configRegistry[key])
			print 'EndSection'
			print
			print 'Section "Monitor"'
			print '\tIdentifier "%s"' % (configRegistry.get('xorg/display/secondary'))
			for key in configRegistry.keys():
				if key.startswith('xorg/monitorsecondary/'):
						if key.startswith('xorg/monitorsecondary/options/'):
							opt = key.split('xorg/monitorsecondary/options/')[-1]
							if configRegistry[key] == "__SET__":
								print '\tOption\t"%s"' % (opt)
							elif not configRegistry[key] == "__NOT_SET__":
								print '\tOption\t"%s" "%s"' % (opt, configRegistry[key])
						elif key.startswith('xorg/monitorsecondary/modeline') or key.startswith('xorg/monitorsecondary/Modeline'):
							print '\tModeLine\t%s' % (configRegistry[key])
						else:
							opt = key.split('org/monitorsecondary/')[-1]
							if configRegistry[key] == "__SET__":
								print '\t%s' % (opt)
							elif not configRegistry[key] == "__NOT_SET__":
								if opt.lower() == 'displaysize':
									try:
										x = configRegistry[key].lower().split('x')[0]
										y = configRegistry[key].lower().split('x')[1]
										print '\tDisplaySize\t%s %s' % (x, y)
									except:
										print '\t#failed to set the DisplaySize'
										pass
								elif opt.lower() == 'gamma':
									gamma = configRegistry[key].strip().split(' ')
									print '\tGamma\t%s %s %s' % (gamma[0], gamma[1], gamma[2])
								else:
									print '\t%s\t%s' % (opt, configRegistry[key])
			if configRegistry.get('xorg/display/relative-position') in ('left', 'right', 'above', 'below'):
				if configRegistry.get('xorg/display/relative-position') == 'right':
					print '\tOption "RightOf" "%s"' % (configRegistry.get('xorg/display/primary'))
				elif configRegistry.get('xorg/display/relative-position') == 'left':
					print '\tOption "LeftOf" "%s"' % (configRegistry.get('xorg/display/primary'))
				elif configRegistry.get('xorg/display/relative-position') == 'above':
					print '\tOption "Above" "%s"' % (configRegistry.get('xorg/display/primary'))
				elif configRegistry.get('xorg/display/relative-position') == 'below':
					print '\tOption "Below" "%s"' % (configRegistry.get('xorg/display/primary'))
			print 'EndSection'

	print '''
Section "DRI"
	Mode 0666
EndSection
'''
@!@
